# Third-party dependency management for μToolkit

# Set header path variables
set(FMT_INCLUDE_DIRS "")
set(SPDLOG_INCLUDE_DIRS "")
set(BENCHMARK_INCLUDE_DIRS "")

# fmt - C++ formatting library
find_package(fmt QUIET)
if(fmt_FOUND)
    message(STATUS "Found system fmt: ${fmt_VERSION}")
    set(FMT_FOUND TRUE)
    get_target_property(FMT_INCLUDE_DIRS fmt::fmt INTERFACE_INCLUDE_DIRECTORIES)
else()
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/third_party/fmt/include/fmt/core.h")
        message(STATUS "Using fmt from submodule")
        set(FMT_INSTALL OFF CACHE BOOL "Generate the install target" FORCE)
        set(FMT_TEST OFF CACHE BOOL "Generate the test target" FORCE)
        add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/third_party/fmt)
        set(FMT_FOUND TRUE)
        set(FMT_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/third_party/fmt/include")
        set(FMT_LIBRARIES fmt::fmt)
    else()
        message(STATUS "fmt not found, examples will be disabled")
        set(FMT_FOUND FALSE)
    endif()
endif()

# spdlog - C++ logging library
find_package(spdlog QUIET)
if(spdlog_FOUND)
    message(STATUS "Found system spdlog: ${spdlog_VERSION}")
    set(SPDLOG_FOUND TRUE)
    get_target_property(SPDLOG_INCLUDE_DIRS spdlog::spdlog INTERFACE_INCLUDE_DIRECTORIES)
else()
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/third_party/spdlog/include/spdlog/spdlog.h")
        message(STATUS "Using spdlog from submodule")
        set(SPDLOG_BUILD_EXAMPLE OFF CACHE BOOL "Build example" FORCE)
        set(SPDLOG_BUILD_TESTS OFF CACHE BOOL "Build tests" FORCE)
        set(SPDLOG_BUILD_BENCH OFF CACHE BOOL "Build benchmarks" FORCE)
        set(SPDLOG_INSTALL OFF CACHE BOOL "Generate install target" FORCE)
        add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/third_party/spdlog)
        set(SPDLOG_FOUND TRUE)
        set(SPDLOG_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/third_party/spdlog/include")
        set(SPDLOG_LIBRARIES spdlog::spdlog)
    else()
        message(STATUS "spdlog not found, examples will be disabled")
        set(SPDLOG_FOUND FALSE)
    endif()
endif()

# GoogleTest - C++ testing framework
if(UTOOLKIT_BUILD_TESTS)
    find_package(GTest QUIET)
    if(GTest_FOUND)
        message(STATUS "Found system GTest")
    else()
        if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/third_party/googletest/googletest/include/gtest/gtest.h")
            message(STATUS "Using GoogleTest from submodule")
            set(INSTALL_GTEST OFF CACHE BOOL "Install GoogleTest" FORCE)
            set(BUILD_GMOCK OFF CACHE BOOL "Build GMock" FORCE)
            add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/third_party/googletest)
        endif()
    endif()
endif()

# Google Benchmark - C++ benchmarking
find_package(benchmark QUIET)
if(benchmark_FOUND)
    message(STATUS "Found system benchmark: ${benchmark_VERSION}")
    set(BENCHMARK_FOUND TRUE)
    get_target_property(BENCHMARK_INCLUDE_DIRS benchmark::benchmark INTERFACE_INCLUDE_DIRECTORIES)
else()
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/third_party/benchmark/include/benchmark/benchmark.h")
        message(STATUS "Using benchmark from submodule")
        set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL "Enable testing of the benchmark library." FORCE)
        set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL "Enable installation of benchmark." FORCE)
        add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/third_party/benchmark)
        set(BENCHMARK_FOUND TRUE)
        set(BENCHMARK_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/third_party/benchmark/include")
        set(BENCHMARK_LIBRARIES benchmark::benchmark)
    else()
        message(STATUS "benchmark not found, examples will be disabled")
        set(BENCHMARK_FOUND FALSE)
    endif()
endif()

# POCO - C++ libraries for building network-based applications
find_package(Poco QUIET COMPONENTS Foundation Net Util XML JSON)
if(Poco_FOUND)
    message(STATUS "Found system POCO: ${Poco_VERSION}")
    set(POCO_FOUND TRUE)
    set(POCO_INCLUDE_DIRS ${Poco_INCLUDE_DIRS})
    set(POCO_LIBRARIES ${Poco_LIBRARIES})
else()
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/third_party/poco/Foundation/include/Poco/Foundation.h")
        message(STATUS "Using POCO from submodule")
        set(ENABLE_CRYPTO OFF CACHE BOOL "Enable Crypto support" FORCE)
        set(ENABLE_NETSSL OFF CACHE BOOL "Enable NetSSL support" FORCE)
        set(ENABLE_JWT OFF CACHE BOOL "Enable JWT support" FORCE)
        set(ENABLE_DATA OFF CACHE BOOL "Enable Data support" FORCE)
        set(ENABLE_DATA_SQLITE OFF CACHE BOOL "Enable Data SQlite support" FORCE)
        set(ENABLE_DATA_MYSQL OFF CACHE BOOL "Enable Data MySQL support" FORCE)
        set(ENABLE_DATA_POSTGRESQL OFF CACHE BOOL "Enable Data PostgreSQL support" FORCE)
        set(ENABLE_MONGODB OFF CACHE BOOL "Enable MongoDB support" FORCE)
        set(ENABLE_REDIS OFF CACHE BOOL "Enable Redis support" FORCE)
        set(ENABLE_PDF OFF CACHE BOOL "Enable PDF support" FORCE)
        set(ENABLE_UTIL ON CACHE BOOL "Enable Util support" FORCE)
        set(ENABLE_NET ON CACHE BOOL "Enable Net support" FORCE)
        set(ENABLE_FOUNDATION ON CACHE BOOL "Enable Foundation support" FORCE)
        set(ENABLE_XML ON CACHE BOOL "Enable XML support" FORCE)
        set(ENABLE_JSON ON CACHE BOOL "Enable JSON support" FORCE)
        set(POCO_STATIC ON CACHE BOOL "Build static libraries" FORCE)
        set(POCO_UNBUNDLED OFF CACHE BOOL "Use external (system) dependencies" FORCE)
        set(ENABLE_TESTS OFF CACHE BOOL "Build tests" FORCE)
        set(ENABLE_SAMPLES OFF CACHE BOOL "Build samples" FORCE)
        add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/third_party/poco)
        set(POCO_FOUND TRUE)
        set(POCO_INCLUDE_DIRS 
            ${CMAKE_CURRENT_SOURCE_DIR}/third_party/poco/Foundation/include
            ${CMAKE_CURRENT_SOURCE_DIR}/third_party/poco/Net/include
            ${CMAKE_CURRENT_SOURCE_DIR}/third_party/poco/Util/include
            ${CMAKE_CURRENT_SOURCE_DIR}/third_party/poco/XML/include
            ${CMAKE_CURRENT_SOURCE_DIR}/third_party/poco/JSON/include
        )
        set(POCO_LIBRARIES PocoFoundation PocoNet PocoUtil PocoXML PocoJSON)
    else()
        message(STATUS "POCO not found - will not be available")
        set(POCO_FOUND FALSE)
    endif()
endif()

# 设置POCO变量供其他模块使用
if(POCO_FOUND)
    add_library(utoolkit::poco INTERFACE IMPORTED)
    set_target_properties(utoolkit::poco PROPERTIES
        INTERFACE_INCLUDE_DIRECTORIES "${POCO_INCLUDE_DIRS}"
        INTERFACE_LINK_LIBRARIES "${POCO_LIBRARIES}"
    )
endif()